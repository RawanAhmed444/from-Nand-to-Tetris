// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	// So we can know if the op-code is zero(A-instruction) or one(C-instruction)
	Not(in=instruction[15],out=notIns);
	// If(op-code==0)store the ALUout in the Areg.
	// Else store the instruction in the Areg. 
	Mux16(a=ALUout, b=instruction, sel=notIns, out=outMux1);	
	
	//A register
	// If(op-code==0 || d1==1(in the c-instruction which choose the data to be stored in the Areg.)), load into the Areg.
	// In other words, if it was A-instruction or it was C-instruction and the distanation d1 = 1
	Or(a=notIns, b=instruction[5], out=intoA);
	// Store the first 15 bit of the Aout in the address of the target location 	
	ARegister(in=outMux1, load=intoA, out=Aout, out[0..14]=addressM);	
	
 	//D register
	// If(op-code==1 && d2==1(in the c-instruction which choose the data to be stored in the Dreg.)) load into the Dreg.
 	And(a=instruction[15], b=instruction[4], out=intoD);		
 	DRegister(in=ALUout, load=intoD, out=Dout);

 	//ALU
	// If(op-code==1 && a==1(in the c-instruction which choose the data to do calc. on to be Memory or Dreg..)), select the input of Memory
	And(a=instruction[15], b=instruction[12], out=AorM);	
	// Selecting the input of memory or the A register
	Mux16(a=Aout, b=inM, sel=AorM, out=outMux2);
	// zx, nx, zy, ny, f, and no. select the computation digits in the C-instruction to control the ALU inputs
 	ALU(x=Dout, y=outMux2, zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUout, out=outM, zr=zr , ng=ng);	
	
	//PC
	// If(zr==0 (which tells that the ALUout is not zero) &&  ng==0 (which tells that the ALUout is positive) && op-code==1 && j3==1), there is jump so load the pc
	Not(in=zr, out=notZero);
	Not(in=ng, out=pos);
	And(a=notZero, b=pos, out=notZeroAndPos);
	And(a=instruction[15], b=instruction[0], out=jgt);
	And(a=notZeroAndPos, b=jgt, out=load3) ;	 
	
	// If(ng==1 (which tells that the ALUout is negative) &&  op-code==1 &&  j1==1), there is jump so load the pc 
	And(a=instruction[15], b=instruction[2], out=jlt);	
	And(a=jlt, b=ng, out=load2);

	// If(zr==1 (which tells that the ALUout is zero) &&  op-code==1 &&  j2==1), there is jump so load the pc
	And(a=instruction[15], b=instruction[1], out=jeq);		
	And(a=jeq, b=zr, out=load1);

	// If(JGT || JLT || JEQ), load the pc
	Or(a=load3, b=load2, out=load32);		
	Or(a=load32, b=load1, out=loadTotal);
	
	// If there is no load,  increment the pc
	PC(in=Aout, load=loadTotal, inc=true, reset=reset, out[0..14]=pc);	
	
	//Write to Memory
	// If(op-code==1 &&  d3==1(in the c-instruction which choose the data to be stored in the memory)), write to the memory
	And(a=instruction[15],b=instruction[3],out=writeM);	
}